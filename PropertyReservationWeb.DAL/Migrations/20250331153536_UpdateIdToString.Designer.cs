// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PropertyReservationWeb.DAL;

#nullable disable

namespace PropertyReservationWeb.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250331153536_UpdateIdToString")]
    partial class UpdateIdToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Advertisement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Point>("AdressCoordinates")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("geometry")
                        .HasDefaultValueSql("ST_GeomFromText('POINT(0 0)', 4326)");

                    b.Property<string>("AdressName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("ConfirmationStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<decimal>("FixedPrepaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("IdAuthor")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfBathrooms")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfBeds")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfPromotionPoints")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfRooms")
                        .HasColumnType("bigint");

                    b.Property<int>("ObjectType")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("TotalArea")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.AdvertisementAmenity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IdAdvertisement")
                        .HasColumnType("bigint");

                    b.Property<long>("IdAmenity")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdAdvertisement");

                    b.HasIndex("IdAmenity");

                    b.ToTable("AdvertisementAmenities", (string)null);
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Amenity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AmenityType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AmenityType = 0
                        },
                        new
                        {
                            Id = 2L,
                            AmenityType = 1
                        },
                        new
                        {
                            Id = 3L,
                            AmenityType = 2
                        },
                        new
                        {
                            Id = 4L,
                            AmenityType = 3
                        },
                        new
                        {
                            Id = 5L,
                            AmenityType = 4
                        },
                        new
                        {
                            Id = 6L,
                            AmenityType = 5
                        },
                        new
                        {
                            Id = 7L,
                            AmenityType = 6
                        },
                        new
                        {
                            Id = 8L,
                            AmenityType = 7
                        },
                        new
                        {
                            Id = 9L,
                            AmenityType = 8
                        },
                        new
                        {
                            Id = 10L,
                            AmenityType = 9
                        },
                        new
                        {
                            Id = 11L,
                            AmenityType = 10
                        },
                        new
                        {
                            Id = 12L,
                            AmenityType = 11
                        },
                        new
                        {
                            Id = 13L,
                            AmenityType = 12
                        },
                        new
                        {
                            Id = 14L,
                            AmenityType = 13
                        },
                        new
                        {
                            Id = 15L,
                            AmenityType = 14
                        });
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.ApprovalRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdAdvertisement")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUserAdmin")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdAdvertisement");

                    b.HasIndex("IdUserAdmin");

                    b.ToTable("ApprovalRequests", (string)null);
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.ConversationRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("IdOneUser")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTwoUser")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdOneUser");

                    b.HasIndex("IdTwoUser");

                    b.ToTable("ConversationRooms", (string)null);
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IdConversationRoom")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdConversationRoom");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.PaymentRentalRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DeleteStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("RentalRequestId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RentalRequestId");

                    b.ToTable("PaymentRentalRequests", (string)null);
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Photo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("DeleteStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("IdAdvertisement")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("ValuePhoto")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("IdAdvertisement");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.RentalRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BookingFinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BookingStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataChangeStatus")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DeleteStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("IdAuthorRentalRequest")
                        .HasColumnType("bigint");

                    b.Property<long>("IdNeedAdvertisement")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentActiveId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthorRentalRequest");

                    b.HasIndex("IdNeedAdvertisement");

                    b.ToTable("RentalRequests", (string)null);
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AuthorsViewingStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdNeedRentalRequest")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsTheLandlord")
                        .HasColumnType("boolean");

                    b.Property<bool>("RecipientsViewingStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("RentalRequestId")
                        .HasColumnType("bigint");

                    b.Property<bool>("StatusDel")
                        .HasColumnType("boolean");

                    b.Property<int>("TheQualityOfTheTransaction")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdNeedRentalRequest");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("bytea");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Balance = 0m,
                            BonusPoints = 100000,
                            DateOfRegistration = new DateTime(2025, 3, 31, 15, 35, 36, 253, DateTimeKind.Utc).AddTicks(9196),
                            Email = "admin@example.com",
                            Name = "Andrey",
                            Password = "123456",
                            PhoneNumber = "89992341221",
                            Rating = 0.0,
                            Role = 2,
                            Status = false
                        });
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Advertisement", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.User", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.AdvertisementAmenity", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.Advertisement", "Advertisement")
                        .WithMany("AdvertisementAmenities")
                        .HasForeignKey("IdAdvertisement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyReservationWeb.Domain.Models.Amenity", "Amenity")
                        .WithMany("AdvertisementAmenity")
                        .HasForeignKey("IdAmenity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("Amenity");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.ApprovalRequest", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.Advertisement", "Advertisement")
                        .WithMany("ApprovalRequests")
                        .HasForeignKey("IdAdvertisement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyReservationWeb.Domain.Models.User", "User")
                        .WithMany("ApprovalRequests")
                        .HasForeignKey("IdUserAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.ConversationRoom", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.User", "OneUser")
                        .WithMany("ConversationRooms1")
                        .HasForeignKey("IdOneUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyReservationWeb.Domain.Models.User", "TwoUser")
                        .WithMany("ConversationRooms2")
                        .HasForeignKey("IdTwoUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OneUser");

                    b.Navigation("TwoUser");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Message", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.ConversationRoom", "ConversationRoom")
                        .WithMany("Message")
                        .HasForeignKey("IdConversationRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversationRoom");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.PaymentRentalRequest", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.RentalRequest", "RentalRequest")
                        .WithMany("Payments")
                        .HasForeignKey("RentalRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalRequest");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Photo", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.Advertisement", "Advertisement")
                        .WithMany("Photos")
                        .HasForeignKey("IdAdvertisement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.RentalRequest", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.User", "User")
                        .WithMany("RentalRequests")
                        .HasForeignKey("IdAuthorRentalRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyReservationWeb.Domain.Models.Advertisement", "Advertisement")
                        .WithMany("RentalRequests")
                        .HasForeignKey("IdNeedAdvertisement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Review", b =>
                {
                    b.HasOne("PropertyReservationWeb.Domain.Models.RentalRequest", "RentalRequest")
                        .WithMany("Review")
                        .HasForeignKey("IdNeedRentalRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalRequest");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Advertisement", b =>
                {
                    b.Navigation("AdvertisementAmenities");

                    b.Navigation("ApprovalRequests");

                    b.Navigation("Photos");

                    b.Navigation("RentalRequests");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.Amenity", b =>
                {
                    b.Navigation("AdvertisementAmenity");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.ConversationRoom", b =>
                {
                    b.Navigation("Message");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.RentalRequest", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("PropertyReservationWeb.Domain.Models.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("ApprovalRequests");

                    b.Navigation("ConversationRooms1");

                    b.Navigation("ConversationRooms2");

                    b.Navigation("RentalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
